apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: nodejs-image-scan-task
  namespace: kabanero
spec:
  inputs:
    params:
      - default: oscap-chroot
        description: The scanner command
        name: command
        type: string
      - default: oval
        description: 'Specifies the type of SCAP content to use. For example, oval or xccdf.'
        name: module
        type: string
      - default: 'test'
        description: Specifies the module operation options and arguments
        name: options-and-arguments
        type: string
      - default: kabanero/scans
        description: The relative directory to save the scan outputs to
        name: scansDir
        type: string
      - default: /usr/local/share/openscap/cpe/openscap-cpe-oval.xml
        description: The scanner's XCCDF or OVAL file
        name: pathToInputFile
        type: string
    resources:
      - name: git-source
        type: git
      - name: docker-image
        type: image
  steps:
    - args:
        - '-c'
        - >
          #logic to make docker image image_name as lowercase

          #example input
          docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF

          # Then output should be =
          image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF


          echo "INPUTS_RESOURCE_DOCKER_IMAGE_URL=\$( echo
          \$(inputs.resources.docker-image.url) ) " >
          imageurl_imagename_lowercase.sh


          # we cut the string with last occurance of '/' to get image name and
          tag as secondHalf of URL

          echo "firstHalfURL=\$(echo \$INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev |
          cut -d\"/\" -f2- | rev)"  >> imageurl_imagename_lowercase.sh

          echo "secondHalfURL=\$(echo \$INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev |
          cut -d\"/\" -f1 | rev)" >>  imageurl_imagename_lowercase.sh


          #Conditional check if ':' is present in 'secondHalfURL'.

          #for ex - secondHalfURL=appsodympversion:abcDEF

          echo "if [[ \$secondHalfURL == *\":\"* ]]; then" >>
          imageurl_imagename_lowercase.sh

          echo "  imagename=\$(cut -d ':' -f 1 <<< \"\$secondHalfURL\" )" >>
          imageurl_imagename_lowercase.sh

          echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]'
          '[:lower:]')" >> imageurl_imagename_lowercase.sh

          echo "  tagname=\$(cut -d ':' -f 2- <<< \"\$secondHalfURL\" )" >>
          imageurl_imagename_lowercase.sh

          echo "
          OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase:\$tagname"
          >> imageurl_imagename_lowercase.sh

          #conditional check for ex - secondHalfURL=appsodympversion:abcDEF

          echo "else" >> imageurl_imagename_lowercase.sh

          echo "  imagename=\$secondHalfURL" >> imageurl_imagename_lowercase.sh

          echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]'
          '[:lower:]')" >> imageurl_imagename_lowercase.sh

          echo "
          OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase"
          >> imageurl_imagename_lowercase.sh

          echo "fi" >> imageurl_imagename_lowercase.sh

          echo "echo \"\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" " >>
          imageurl_imagename_lowercase.sh


          chmod 755 imageurl_imagename_lowercase.sh
      command:
        - /bin/bash
      env:
        - name: gitsource
          value: git-source
      image: 'appsody/appsody-buildah:0.5.8-buildah1.9.0'
      name: imagename-lowercase
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
    - args:
        - '-c'
        - >
          INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $(
          /workspace/imageurl_imagename_lowercase.sh ) )

          echo
          "INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"


          echo "Pulling image
          docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

          buildah from --tls-verify=false
          docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE

          echo $(buildah mount $(buildah containers -q)) >
          /var/lib/containers/rootfs.txt

          mountDir=$(cat /var/lib/containers/rootfs.txt)

          echo ""

          echo "Mounted image to $mountDir with contents:"

          ls -la $mountDir

          cp -a $mountDir /var/lib/containers

          echo ""

          imageDir=/var/lib/containers/merged

          imageIdFileName=/var/lib/containers/imageid.txt

          echo "Copied mounted image to $imageDir:"

          ls -la $imageDir

          echo $(buildah images -q) > $imageIdFileName

          echo ""

          echo "Image ID of the image to scan: $(cat $imageIdFileName)"
      command:
        - /bin/bash
      env:
        - name: gitsource
          value: git-source
      image: 'appsody/appsody-buildah:0.5.0-buildah1.9.0'
      name: mount-image
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
    - args:
        - '-c'
        - >
          imageid=$(cat /var/lib/containers/imageid.txt)

          imageDir=/var/lib/containers/merged


          INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $(
          /workspace/imageurl_imagename_lowercase.sh ) )

          echo
          "INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"


          outputDir=/workspace/scans/$(inputs.params.scansDir)/$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE/$imageid

          mkdir -p $outputDir

          optionsAndArgs="$(inputs.params.options-and-arguments) --results
          $outputDir/results.xml --report $outputDir/report.html
          $(inputs.params.pathToInputFile)"

          scanCommand="$(inputs.params.command) $imageDir
          $(inputs.params.module) eval $optionsAndArgs"


          echo "Scanning copy of image
          docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE with image ID
          $imageid in $imageDir with contents:"

          cd $imageDir

          ls -la

          echo ""

          echo "Scanning image with command:"

          echo $scanCommand

          $scanCommand

          echo ""

          echo "Scanning of copy of image
          $INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE with image ID $imageid in
          $imageDir complete"

          echo ""


          #Display contents of the results.xml and report.html files

          echo "Displaying contents of $outputDir/results.xml"

          echo "********** START OF results.xml **********"

          cat $outputDir/results.xml

          echo "********** END OF results.xml ************"

          echo ""

          echo "Displaying contents of $outputDir/report.html"

          echo "********** START OF report.html **********"

          cat $outputDir/report.html

          echo "********** END OF report.html ************"
      command:
        - /bin/bash
      image: 'kabanero/scanner:1.3.1'
      name: scan-image
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /workspace/scans
          name: host-save-dir
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - hostPath:
        path: /var/lib
      name: host-save-dir
    - emptyDir: {}
      name: varlibcontainers
